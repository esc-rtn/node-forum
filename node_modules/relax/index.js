(function(){
  var request, MAX_ALTER_TRIES, Database, retrySoon;
  request = require('request');
  MAX_ALTER_TRIES = 10;
  module.exports = Database = (function(){
    Database.displayName = 'Database';
    var prototype = Database.prototype, constructor = Database;
    function Database(options){
      this.host = '127.0.0.1';
      this.port = 5984;
      this.db_name = null;
      this.ssl = false;
      __import(this, options);
    }
    prototype.request = function(method, _arg, cb){
      var path, body, protocol, url, opts;
      path = _arg.path, body = _arg.body;
      protocol = this.ssl ? 'https' : 'http';
      url = protocol + "://" + this.host + ":" + this.port + "/" + this.db_name + "/" + path;
      opts = {
        url: url,
        method: method,
        json: true,
        body: body
      };
      return request(opts, function(error, response, data){
        if (error != null) {
          return cb(error);
        }
        if (data === void 8) {
          return cb(new Error("invalid JSON returned from DB"));
        }
        if (response.statusCode >= 400) {
          return cb(data);
        }
        return cb(null, data);
      });
    };
    prototype.get = function(key, cb){
      key = encodeURIComponent(key);
      return this.request('GET', {
        path: key
      }, cb);
    };
    prototype.store = function(key, doc, cb){
      key = encodeURIComponent(key);
      return this.request('PUT', {
        path: key,
        body: doc
      }, function(error, result){
        if (error != null) {
          return cb(error);
        }
        return cb(null);
      });
    };
    prototype.alter = function(key, alter, cb){
      var nonconflictFails, attempt, _this = this;
      nonconflictFails = 0;
      return (attempt = function(){
        var tryOp;
        tryOp = function(op, opcb){
          return op(function(err, result){
            if (err) {
              if (!(err.error === 'conflict') && ++nonconflictFails === MAX_ALTER_TRIES) {
                return cb(new Error("could not alter the document in " + MAX_ALTER_TRIES + " tries, not counting conflicts"));
              } else {
                return retrySoon(attempt);
              }
            } else {
              return opcb(result);
            }
          });
        };
        return tryOp(function(cb){
          return _this.get(key, cb);
        }, function(doc){
          doc = alter(doc);
          return tryOp(function(cb){
            return _this.store(key, doc, cb);
          }, function(){
            return cb(null);
          });
        });
      })();
    };
    return Database;
  }());
  retrySoon = function(fn){
    return setTimeout(fn, Math.floor(Math.random() * 500));
  };
  function __import(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
